
// Code generated by stanc v2.29.0
#include <stan/model/model_header.hpp>
namespace model2_posterior_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 51> locations_array__ = 
{" (found before start of program)",
 " (in '/home/stan/model2_posterior.stan', line 12, column 4 to column 31)",
 " (in '/home/stan/model2_posterior.stan', line 13, column 4 to column 36)",
 " (in '/home/stan/model2_posterior.stan', line 14, column 4 to column 35)",
 " (in '/home/stan/model2_posterior.stan', line 15, column 4 to column 47)",
 " (in '/home/stan/model2_posterior.stan', line 19, column 4 to column 35)",
 " (in '/home/stan/model2_posterior.stan', line 20, column 4 to column 40)",
 " (in '/home/stan/model2_posterior.stan', line 21, column 4 to column 51)",
 " (in '/home/stan/model2_posterior.stan', line 22, column 4 to column 24)",
 " (in '/home/stan/model2_posterior.stan', line 24, column 8 to column 104)",
 " (in '/home/stan/model2_posterior.stan', line 25, column 8 to column 107)",
 " (in '/home/stan/model2_posterior.stan', line 26, column 8 to column 136)",
 " (in '/home/stan/model2_posterior.stan', line 27, column 8 to column 100)",
 " (in '/home/stan/model2_posterior.stan', line 23, column 19 to line 28, column 5)",
 " (in '/home/stan/model2_posterior.stan', line 23, column 4 to line 28, column 5)",
 " (in '/home/stan/model2_posterior.stan', line 44, column 4 to column 56)",
 " (in '/home/stan/model2_posterior.stan', line 45, column 4 to column 23)",
 " (in '/home/stan/model2_posterior.stan', line 48, column 8 to column 63)",
 " (in '/home/stan/model2_posterior.stan', line 49, column 8 to column 59)",
 " (in '/home/stan/model2_posterior.stan', line 47, column 19 to line 50, column 5)",
 " (in '/home/stan/model2_posterior.stan', line 47, column 4 to line 50, column 5)",
 " (in '/home/stan/model2_posterior.stan', line 33, column 8 to column 39)",
 " (in '/home/stan/model2_posterior.stan', line 34, column 8 to column 43)",
 " (in '/home/stan/model2_posterior.stan', line 32, column 18 to line 35, column 5)",
 " (in '/home/stan/model2_posterior.stan', line 32, column 4 to line 35, column 5)",
 " (in '/home/stan/model2_posterior.stan', line 37, column 8 to column 44)",
 " (in '/home/stan/model2_posterior.stan', line 38, column 8 to column 58)",
 " (in '/home/stan/model2_posterior.stan', line 36, column 18 to line 39, column 5)",
 " (in '/home/stan/model2_posterior.stan', line 36, column 4 to line 39, column 5)",
 " (in '/home/stan/model2_posterior.stan', line 40, column 4 to column 36)",
 " (in '/home/stan/model2_posterior.stan', line 2, column 4 to column 19)",
 " (in '/home/stan/model2_posterior.stan', line 3, column 4 to column 19)",
 " (in '/home/stan/model2_posterior.stan', line 4, column 4 to column 19)",
 " (in '/home/stan/model2_posterior.stan', line 5, column 11 to column 12)",
 " (in '/home/stan/model2_posterior.stan', line 5, column 4 to column 44)",
 " (in '/home/stan/model2_posterior.stan', line 6, column 11 to column 12)",
 " (in '/home/stan/model2_posterior.stan', line 6, column 4 to column 49)",
 " (in '/home/stan/model2_posterior.stan', line 7, column 11 to column 12)",
 " (in '/home/stan/model2_posterior.stan', line 7, column 4 to column 46)",
 " (in '/home/stan/model2_posterior.stan', line 8, column 11 to column 12)",
 " (in '/home/stan/model2_posterior.stan', line 8, column 4 to column 42)",
 " (in '/home/stan/model2_posterior.stan', line 12, column 10 to column 11)",
 " (in '/home/stan/model2_posterior.stan', line 13, column 10 to column 11)",
 " (in '/home/stan/model2_posterior.stan', line 14, column 10 to column 11)",
 " (in '/home/stan/model2_posterior.stan', line 15, column 10 to column 11)",
 " (in '/home/stan/model2_posterior.stan', line 19, column 10 to column 11)",
 " (in '/home/stan/model2_posterior.stan', line 20, column 10 to column 11)",
 " (in '/home/stan/model2_posterior.stan', line 21, column 10 to column 11)",
 " (in '/home/stan/model2_posterior.stan', line 22, column 10 to column 11)",
 " (in '/home/stan/model2_posterior.stan', line 44, column 11 to column 12)",
 " (in '/home/stan/model2_posterior.stan', line 45, column 12 to column 13)"};




class model2_posterior_model final : public model_base_crtp<model2_posterior_model> {

 private:
  int N;
  int D;
  int C;
  std::vector<int> drivers;
  std::vector<int> constructors;
  std::vector<int> position;
  std::vector<int> rainy; 
  
 
 public:
  ~model2_posterior_model() { }
  
  inline std::string model_name() const final { return "model2_posterior_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.0", "stancflags = "};
  }
  
  
  model2_posterior_model(stan::io::var_context& context__,
                         unsigned int random_seed__ = 0,
                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "model2_posterior_model_namespace::model2_posterior_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 30;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 30;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 31;
      context__.validate_dims("data initialization","D","int",
           std::vector<size_t>{});
      D = std::numeric_limits<int>::min();
      
      
      current_statement__ = 31;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 32;
      context__.validate_dims("data initialization","C","int",
           std::vector<size_t>{});
      C = std::numeric_limits<int>::min();
      
      
      current_statement__ = 32;
      C = context__.vals_i("C")[(1 - 1)];
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "C", C, 1);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("drivers", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization","drivers","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      drivers = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 34;
      drivers = context__.vals_i("drivers");
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "drivers", drivers, 1);
      current_statement__ = 34;
      stan::math::check_less_or_equal(function__, "drivers", drivers, D);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("constructors", "N", N);
      current_statement__ = 36;
      context__.validate_dims("data initialization","constructors","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      constructors = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 36;
      constructors = context__.vals_i("constructors");
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "constructors",
                                            constructors, 1);
      current_statement__ = 36;
      stan::math::check_less_or_equal(function__, "constructors",
                                         constructors, C);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("position", "N", N);
      current_statement__ = 38;
      context__.validate_dims("data initialization","position","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      position = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 38;
      position = context__.vals_i("position");
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "position", position, 0);
      current_statement__ = 38;
      stan::math::check_less_or_equal(function__, "position", position, 19);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("rainy", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization","rainy","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      rainy = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 40;
      rainy = context__.vals_i("rainy");
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "rainy", rainy, 0);
      current_statement__ = 40;
      stan::math::check_less_or_equal(function__, "rainy", rainy, 1);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("driver_skill", "D", D);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("constructor_skill", "C", C);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("driver_skill_wet", "D", D);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("constructor_skill_track_temp",
                                              "C", C);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("driver_skill_sum", "D", D);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("constructor_skill_sum", "C", C);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("constructor_skill_sum_track_temp",
                                              "C", C);
      current_statement__ = 48;
      stan::math::validate_non_negative_index("theta", "N", N);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("position_predicted", "N", N);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = D + C + D + C;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model2_posterior_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> driver_skill =
         std::vector<local_scalar_t__>(D, DUMMY_VAR__);
      current_statement__ = 1;
      driver_skill = in__.template read<std::vector<local_scalar_t__>>(D);
      std::vector<local_scalar_t__> constructor_skill =
         std::vector<local_scalar_t__>(C, DUMMY_VAR__);
      current_statement__ = 2;
      constructor_skill = in__.template read<std::vector<local_scalar_t__>>(
                            C);
      std::vector<local_scalar_t__> driver_skill_wet =
         std::vector<local_scalar_t__>(D, DUMMY_VAR__);
      current_statement__ = 3;
      driver_skill_wet = in__.template read<std::vector<local_scalar_t__>>(D);
      std::vector<local_scalar_t__> constructor_skill_track_temp =
         std::vector<local_scalar_t__>(C, DUMMY_VAR__);
      current_statement__ = 4;
      constructor_skill_track_temp = in__.template read<
                                       std::vector<local_scalar_t__>>(C);
      std::vector<local_scalar_t__> driver_skill_sum =
         std::vector<local_scalar_t__>(D, DUMMY_VAR__);
      std::vector<local_scalar_t__> constructor_skill_sum =
         std::vector<local_scalar_t__>(C, DUMMY_VAR__);
      std::vector<local_scalar_t__> constructor_skill_sum_track_temp =
         std::vector<local_scalar_t__>(C, DUMMY_VAR__);
      std::vector<local_scalar_t__> theta =
         std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      current_statement__ = 14;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 9;
        stan::model::assign(driver_skill_sum,
          (stan::model::rvalue(driver_skill, "driver_skill",
             stan::model::index_uni(stan::model::rvalue(drivers, "drivers",
                                      stan::model::index_uni(i)))) +
            (stan::model::rvalue(driver_skill_wet, "driver_skill_wet",
               stan::model::index_uni(stan::model::rvalue(drivers, "drivers",
                                        stan::model::index_uni(i)))) *
              stan::model::rvalue(rainy, "rainy", stan::model::index_uni(i)))),
          "assigning variable driver_skill_sum", stan::model::index_uni(
                                                   stan::model::rvalue(
                                                     drivers, "drivers",
                                                     stan::model::index_uni(i))));
        current_statement__ = 10;
        stan::model::assign(constructor_skill_sum_track_temp,
          stan::model::rvalue(constructor_skill_track_temp,
            "constructor_skill_track_temp",
            stan::model::index_uni(stan::model::rvalue(constructors,
                                     "constructors",
                                     stan::model::index_uni(i)))),
          "assigning variable constructor_skill_sum_track_temp", stan::model::index_uni(
                                                                   stan::model::rvalue(
                                                                    constructors,
                                                                    "constructors",
                                                                    stan::model::index_uni(i))));
        current_statement__ = 11;
        stan::model::assign(constructor_skill_sum,
          (stan::model::rvalue(constructor_skill, "constructor_skill",
             stan::model::index_uni(stan::model::rvalue(constructors,
                                      "constructors",
                                      stan::model::index_uni(i)))) +
            stan::model::rvalue(constructor_skill_sum_track_temp,
              "constructor_skill_sum_track_temp",
              stan::model::index_uni(stan::model::rvalue(constructors,
                                       "constructors",
                                       stan::model::index_uni(i))))),
          "assigning variable constructor_skill_sum", stan::model::index_uni(
                                                        stan::model::rvalue(
                                                          constructors,
                                                          "constructors",
                                                          stan::model::index_uni(i))));
        current_statement__ = 12;
        stan::model::assign(theta,
          stan::math::inv_logit(
            (stan::model::rvalue(driver_skill_sum, "driver_skill_sum",
               stan::model::index_uni(stan::model::rvalue(drivers, "drivers",
                                        stan::model::index_uni(i)))) +
              stan::model::rvalue(constructor_skill_sum,
                "constructor_skill_sum",
                stan::model::index_uni(stan::model::rvalue(constructors,
                                         "constructors",
                                         stan::model::index_uni(i)))))),
          "assigning variable theta", stan::model::index_uni(i));
      }
      {
        current_statement__ = 24;
        for (int i = 1; i <= D; ++i) {
          current_statement__ = 21;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(driver_skill, "driver_skill",
                stan::model::index_uni(i)), 0, 1));
          current_statement__ = 22;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(driver_skill_wet, "driver_skill_wet",
                stan::model::index_uni(i)), 0, 2));
        }
        current_statement__ = 28;
        for (int i = 1; i <= C; ++i) {
          current_statement__ = 25;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(constructor_skill, "constructor_skill",
                stan::model::index_uni(i)), 0, 1));
          current_statement__ = 26;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(constructor_skill_track_temp,
                "constructor_skill_track_temp", stan::model::index_uni(i)),
              0, 0.25));
        }
        current_statement__ = 29;
        lp_accum__.add(
          stan::math::binomial_lpmf<propto__>(position, 19, theta));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "model2_posterior_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> driver_skill =
         std::vector<double>(D, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      driver_skill = in__.template read<std::vector<local_scalar_t__>>(D);
      std::vector<double> constructor_skill =
         std::vector<double>(C, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      constructor_skill = in__.template read<std::vector<local_scalar_t__>>(
                            C);
      std::vector<double> driver_skill_wet =
         std::vector<double>(D, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      driver_skill_wet = in__.template read<std::vector<local_scalar_t__>>(D);
      std::vector<double> constructor_skill_track_temp =
         std::vector<double>(C, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      constructor_skill_track_temp = in__.template read<
                                       std::vector<local_scalar_t__>>(C);
      std::vector<double> driver_skill_sum =
         std::vector<double>(D, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> constructor_skill_sum =
         std::vector<double>(C, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> constructor_skill_sum_track_temp =
         std::vector<double>(C, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> theta =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      out__.write(driver_skill);
      out__.write(constructor_skill);
      out__.write(driver_skill_wet);
      out__.write(constructor_skill_track_temp);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 14;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 9;
        stan::model::assign(driver_skill_sum,
          (stan::model::rvalue(driver_skill, "driver_skill",
             stan::model::index_uni(stan::model::rvalue(drivers, "drivers",
                                      stan::model::index_uni(i)))) +
            (stan::model::rvalue(driver_skill_wet, "driver_skill_wet",
               stan::model::index_uni(stan::model::rvalue(drivers, "drivers",
                                        stan::model::index_uni(i)))) *
              stan::model::rvalue(rainy, "rainy", stan::model::index_uni(i)))),
          "assigning variable driver_skill_sum", stan::model::index_uni(
                                                   stan::model::rvalue(
                                                     drivers, "drivers",
                                                     stan::model::index_uni(i))));
        current_statement__ = 10;
        stan::model::assign(constructor_skill_sum_track_temp,
          stan::model::rvalue(constructor_skill_track_temp,
            "constructor_skill_track_temp",
            stan::model::index_uni(stan::model::rvalue(constructors,
                                     "constructors",
                                     stan::model::index_uni(i)))),
          "assigning variable constructor_skill_sum_track_temp", stan::model::index_uni(
                                                                   stan::model::rvalue(
                                                                    constructors,
                                                                    "constructors",
                                                                    stan::model::index_uni(i))));
        current_statement__ = 11;
        stan::model::assign(constructor_skill_sum,
          (stan::model::rvalue(constructor_skill, "constructor_skill",
             stan::model::index_uni(stan::model::rvalue(constructors,
                                      "constructors",
                                      stan::model::index_uni(i)))) +
            stan::model::rvalue(constructor_skill_sum_track_temp,
              "constructor_skill_sum_track_temp",
              stan::model::index_uni(stan::model::rvalue(constructors,
                                       "constructors",
                                       stan::model::index_uni(i))))),
          "assigning variable constructor_skill_sum", stan::model::index_uni(
                                                        stan::model::rvalue(
                                                          constructors,
                                                          "constructors",
                                                          stan::model::index_uni(i))));
        current_statement__ = 12;
        stan::model::assign(theta,
          stan::math::inv_logit(
            (stan::model::rvalue(driver_skill_sum, "driver_skill_sum",
               stan::model::index_uni(stan::model::rvalue(drivers, "drivers",
                                        stan::model::index_uni(i)))) +
              stan::model::rvalue(constructor_skill_sum,
                "constructor_skill_sum",
                stan::model::index_uni(stan::model::rvalue(constructors,
                                         "constructors",
                                         stan::model::index_uni(i)))))),
          "assigning variable theta", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(driver_skill_sum);
        out__.write(constructor_skill_sum);
        out__.write(constructor_skill_sum_track_temp);
        out__.write(theta);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<int> position_predicted =
         std::vector<int>(N, std::numeric_limits<int>::min());
      Eigen::Matrix<double, -1, 1> log_lik =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 17;
        stan::model::assign(log_lik,
          stan::math::binomial_lpmf<false>(
            stan::model::rvalue(position, "position",
              stan::model::index_uni(i)), 19,
            stan::model::rvalue(theta, "theta", stan::model::index_uni(i))),
          "assigning variable log_lik", stan::model::index_uni(i));
        current_statement__ = 18;
        stan::model::assign(position_predicted,
          stan::math::binomial_rng(19,
            stan::model::rvalue(theta, "theta", stan::model::index_uni(i)),
            base_rng__),
          "assigning variable position_predicted", stan::model::index_uni(i));
      }
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "position_predicted",
                                            position_predicted, 0);
      current_statement__ = 15;
      stan::math::check_less_or_equal(function__, "position_predicted",
                                         position_predicted, 19);
      out__.write(position_predicted);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> driver_skill =
         std::vector<local_scalar_t__>(D, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        driver_skill[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(driver_skill);
      std::vector<local_scalar_t__> constructor_skill =
         std::vector<local_scalar_t__>(C, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        constructor_skill[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(constructor_skill);
      std::vector<local_scalar_t__> driver_skill_wet =
         std::vector<local_scalar_t__>(D, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        driver_skill_wet[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(driver_skill_wet);
      std::vector<local_scalar_t__> constructor_skill_track_temp =
         std::vector<local_scalar_t__>(C, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        constructor_skill_track_temp[(sym1__ - 1)] = in__.read<
                                                       local_scalar_t__>();
      }
      out__.write(constructor_skill_track_temp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"driver_skill", "constructor_skill",
      "driver_skill_wet", "constructor_skill_track_temp", "driver_skill_sum",
      "constructor_skill_sum", "constructor_skill_sum_track_temp", "theta",
      "position_predicted", "log_lik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(D)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(C)},
      std::vector<size_t>{static_cast<size_t>(D)},
      std::vector<size_t>{static_cast<size_t>(C)},
      std::vector<size_t>{static_cast<size_t>(D)},
      std::vector<size_t>{static_cast<size_t>(C)},
      std::vector<size_t>{static_cast<size_t>(C)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "driver_skill" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "constructor_skill" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "driver_skill_wet" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "constructor_skill_track_temp" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "driver_skill_sum" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "constructor_skill_sum" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "constructor_skill_sum_track_temp" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "position_predicted" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "driver_skill" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "constructor_skill" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "driver_skill_wet" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "constructor_skill_track_temp" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "driver_skill_sum" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "constructor_skill_sum" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "constructor_skill_sum_track_temp" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "position_predicted" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"driver_skill\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"constructor_skill\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"driver_skill_wet\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"constructor_skill_track_temp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"driver_skill_sum\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"constructor_skill_sum\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"constructor_skill_sum_track_temp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"position_predicted\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"driver_skill\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"constructor_skill\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"driver_skill_wet\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"constructor_skill_track_temp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"driver_skill_sum\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(D) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"constructor_skill_sum\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"constructor_skill_sum_track_temp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"position_predicted\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((D + C) + D) + C);
      const size_t num_transformed = (((D + C) + C) +
                                                              N);
      const size_t num_gen_quantities = 
  (N + N);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((D + C) + D) + C);
      const size_t num_transformed = (((D + C) + C) +
                                                              N);
      const size_t num_gen_quantities = 
  (N + N);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 4> names__{"driver_skill",
      "constructor_skill", "driver_skill_wet",
      "constructor_skill_track_temp"};
      const std::array<Eigen::Index, 4> constrain_param_sizes__{D, C, D, C};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = model2_posterior_model_namespace::model2_posterior_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model2_posterior_model_namespace::profiles__;
}

#endif


